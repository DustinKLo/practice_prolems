class Solution(object):
	@staticmethod
	def print_map(grid):
		for row in grid:
			print(row)	

	def numIslands(self, grid):
		"""
		:type grid: List[List[str]]
		:rtype: int
		"""
		def traverse(y, x):
			# y rows, x columns
			if y > self.map_height - 1 or y < 0:  # if outside map
				return 
			if x > self.map_width - 1 or x < 0:
				return

			# print(y, x, grid[y][x])
			if (y, x,) not in self.visited:
				 self.visited.add((y, x,))
			else:  # if we already visited coordinate
				return

			if grid[y][x] == '0':  # will not traverse if water
				return
			
			traverse(y - 1, x)  # up 
			traverse(y + 1, x)  # down
			traverse(y, x - 1)  # left
			traverse(y, x + 1)  # right

		if len(grid) == 0:
			print("final island count:", 0)
			print("###########################\n")
			return 0

		self.print_map(grid)
		self.visited = set()
		self.map_width = len(grid[0])
		self.map_height = len(grid)

		island_num = 0
		for i in range(self.map_height):
			for j in range(self.map_width):
				if (i, j,) in self.visited:
					 continue
				if grid[i][j] == '1':
					island_num += 1
				traverse(i, j)
		
		print("final island count:", island_num)
		print("###########################\n")
		return island_num


if __name__ == '__main__':
	s = Solution()
	
	ex_map = [
		['1', '1', '1', '1', '0'],
		['1', '1', '0', '1', '0'],
		['1', '1', '0', '0', '0'],
		['0', '0', '0', '0', '0'],
	]
	s.numIslands(ex_map)

	ex_map = [
		 ['1', '1', '0', '0', '0'],
		 ['1', '1', '0', '0', '0'],
		 ['0', '0', '1', '0', '0'],
		 ['0', '0', '0', '1', '1'],
	]
	s.numIslands(ex_map)

	ex_map = [
		 ['1', '1', '0', '0', '1'],
	]
	s.numIslands(ex_map)

	ex_map = [
		 ['1'],
		 ['0'],
		 ['1'],
		 ['0'],
		 ['1'],
	]
	s.numIslands(ex_map)

	ex_map = []
	s.numIslands(ex_map)

	ex_map = [
		 ['1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0'],
		 ['1', '1', '0', '1', '0', '1', '1', '0', '1', '0', '1', '1', '0', '1', '0', '1', '1', '0', '1', '0'],
		 ['1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0'],
		 ['0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1'],
		 ['1', '1', '0', '1', '0', '1', '1', '1', '1', '0', '1', '1', '0', '1', '0', '1', '1', '1', '1', '0'],
		 ['1', '1', '0', '1', '0', '1', '1', '0', '0', '0', '1', '1', '0', '1', '0', '1', '1', '0', '0', '0'],
		 ['1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0'],
		 ['0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0'],
		 ['1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0'],
		 ['1', '1', '0', '1', '0', '1', '1', '0', '1', '0', '1', '1', '0', '1', '0', '1', '1', '0', '1', '0'],
		 ['1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0'],
		 ['0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1'],
		 ['1', '1', '0', '1', '0', '1', '1', '1', '1', '0', '1', '1', '0', '1', '0', '1', '1', '1', '1', '0'],
		 ['1', '1', '0', '1', '0', '1', '1', '0', '0', '0', '1', '1', '0', '1', '0', '1', '1', '0', '0', '0'],
		 ['1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0'],
		 ['0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0'],
	]
	s.numIslands(ex_map)
