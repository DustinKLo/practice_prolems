class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        def merge_lists(l, r):
            while True:
                if len(r) == 0 or len(l) == 0:
                    return l + r

                l_end = l[-1]
                r_end = r[0]

                if l_end[1] >= r_end[0]:
                    mid = [[min(l_end[0], r_end[0]), max(l_end[1], r_end[1])]]
                    l = l[:-1]
                    r = mid + r[1:]
                else:
                    break
            return l + r

        def divide_and_conquer(l):
            if len(l) == 0:
                return []
            if len(l) == 1:
                return l

            mid_pt = int(len(l) / 2)

            left = divide_and_conquer(l[:mid_pt])
            right = divide_and_conquer(l[mid_pt:])

            print(left, right)

            return merge_lists(left, right)

        print(intervals)
        intervals = sorted(intervals, key=lambda x: x[1])
        print(intervals)
        ans = divide_and_conquer(intervals)
        
        print("")
        print("ans: ", ans)
        print("################################\n")
        return ans


if __name__ == '__main__':
    s = Solution()
    s.merge([[1,3],[2,6],[8,10],[15,18]])
    s.merge([[1,4],[4,5]])
    s.merge([[1,3],[2,6],[8,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[15,18]])
    s.merge([[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10]])
    s.merge([])
    s.merge([[1,4],[0,0]])
    s.merge([[2,3],[4,5],[6,7],[8,9],[1,10]])
    s.merge([[5,5],[1,3],[3,5],[4,6],[1,1],[3,3],[5,6],[3,3],[2,4],[0,0]])
    s.merge([[9,11],[430,435],[56,56],[323,330],[47,51],[354,358],[194,202],[286,290],[149,158],[121,127],[208,212],[271,278],[69,78],[33,33],[359,360],[386,394],[84,90],[175,177],[78,79],[241,248],[267,272],[164,165],[113,115],[107,112],[384,392],[291,293],[204,207],[231,234],[352,356],[96,100],[77,79],[284,287],[150,152],[5,5],[163,171],[409,409],[193,196],[243,250],[228,228],[274,276],[78,83],[56,60],[480,489],[259,264],[255,260],[249,251],[189,194],[198,199],[197,202],[123,123],[154,157],[142,149],[106,111],[6,10],[235,235],[298,303],[346,352],[299,307],[345,346],[363,363],[266,268],[433,441],[350,353],[499,506],[38,41],[408,410],[156,156],[392,396],[436,444],[301,304],[31,32],[41,48],[158,160],[407,410],[103,104],[104,106],[235,244],[30,35],[372,373],[133,133],[4,7],[455,457],[443,450],[479,480],[245,247],[255,261],[83,91],[5,6],[340,343],[97,101],[36,37],[166,167],[442,448],[357,363],[77,79],[428,432],[235,238],[298,306],[230,237],[262,270],[409,418],[456,459],[17,21],[86,93],[79,82]])
